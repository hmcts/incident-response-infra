# Docs:
# https://aka.ms/yaml

trigger:
  batch: true
  branches:
    include:
      - master

variables:
  terraformVersion: 1.4.6
  agentPool: 'ubuntu-latest'
  action:

parameters:
  environments:
    - name: 'ptlsbox'
      service_connection: 'DTS-CFTSBOX-INTSVC'
      storage_account_rg: 'core-infra-intsvc-rg'
      storage_account_name: 'cftsboxintsvc'
    - name: 'ptl'
      service_connection: 'DTS-CFTPTL-INTSVC'
      storage_account_rg: 'core-infra-intsvc-rg'
      storage_account_name: 'cftptlintsvc'

stages:
  - stage: GetArtifacts
    jobs:
      - job: Validate
        pool:
          vmImage: ${{ variables.agentPool }}
        steps:
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: ${{ variables.terraformVersion }}
          - task: PowerShell@2
            displayName: Run tests
            inputs:
              targetType: 'inline'
              script: |
                Install-Module -Name Pester -Force -MaximumVersion 4.99.99 -Verbose -Scope CurrentUser
                Invoke-Pester ./ci -OutputFormat NUnitXml -OutputFile ./TEST-CI.xml -EnableExit
              pwsh: true
          - task: PublishTestResults@2
            displayName: 'Publish Test Results **/TEST-*.xml'
            inputs:
              testResultsFormat: NUnit
              failTaskOnFailedTests: true
            condition: always()

  - ${{ each env in parameters.environments }}:
    - stage: PlanResponse
      displayName: "Plan Response - ${{ env.name }}"
      dependsOn: GetArtifacts
      jobs:
        - template: pipeline-templates/terraform-plan.yaml
          parameters:
            environment: ${{ env.name }}
            component: 'response'
            service_connection: ${{ env.service_connection }}
            storage_account_rg: ${{ env.storage_account_rg }}
            storage_account_name: ${{ env.storage_account_name }}
            build: $(Build.BuildNumber)
            agentPool: ${{ variables.agentPool }}
            terraformVersion: ${{ variables.terraformVersion }}
            builtFrom: $(Build.Repository.Name)
        - job: Archive
          dependsOn: Plan_${{ env.name }}_response
          pool:
            vmImage: ${{ variables.agentPool }}
          steps:
            - task: CopyFiles@2
              displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
              inputs:
                Contents: |
                  *.tf
                  *.tfvars
                  *tfplan
                TargetFolder: '$(Build.ArtifactStagingDirectory)'

            - task: PublishBuildArtifacts@1
              displayName: 'Publish Artifact: drop'

    - stage: ApplyResponse
      displayName: "Apply Response - ${{ env.name }}"
      dependsOn: PlanResponse
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      jobs:
        - template: pipeline-templates/terraform-apply.yaml
          parameters:
            environment: ${{ env.name }}
            component: 'response'
            service_connection: ${{ env.service_connection }}
            storage_account_rg: ${{ env.storage_account_rg }}
            storage_account_name: ${{ env.storage_account_name }}
            build: $(Build.BuildNumber)
            agentPool: ${{ variables.agentPool }}
            terraformVersion: ${{ variables.terraformVersion }}
